/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as KitchenImport } from './routes/kitchen'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as WaiterIndexImport } from './routes/waiter/index'
import { Route as KitchenIndexImport } from './routes/kitchen/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AdminTablesImport } from './routes/admin/tables'
import { Route as AdminStaffImport } from './routes/admin/staff'
import { Route as AdminOrderImport } from './routes/admin/order'
import { Route as AdminMenuImport } from './routes/admin/menu'
import { Route as RestaurantRestaurantIdMenuIndexImport } from './routes/restaurant/$restaurantId/menu/index'

// Create/Update Routes

const KitchenRoute = KitchenImport.update({
  id: '/kitchen',
  path: '/kitchen',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WaiterIndexRoute = WaiterIndexImport.update({
  id: '/waiter/',
  path: '/waiter/',
  getParentRoute: () => rootRoute,
} as any)

const KitchenIndexRoute = KitchenIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => KitchenRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminTablesRoute = AdminTablesImport.update({
  id: '/tables',
  path: '/tables',
  getParentRoute: () => AdminRoute,
} as any)

const AdminStaffRoute = AdminStaffImport.update({
  id: '/staff',
  path: '/staff',
  getParentRoute: () => AdminRoute,
} as any)

const AdminOrderRoute = AdminOrderImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => AdminRoute,
} as any)

const AdminMenuRoute = AdminMenuImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => AdminRoute,
} as any)

const RestaurantRestaurantIdMenuIndexRoute =
  RestaurantRestaurantIdMenuIndexImport.update({
    id: '/restaurant/$restaurantId/menu/',
    path: '/restaurant/$restaurantId/menu/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/kitchen': {
      id: '/kitchen'
      path: '/kitchen'
      fullPath: '/kitchen'
      preLoaderRoute: typeof KitchenImport
      parentRoute: typeof rootRoute
    }
    '/admin/menu': {
      id: '/admin/menu'
      path: '/menu'
      fullPath: '/admin/menu'
      preLoaderRoute: typeof AdminMenuImport
      parentRoute: typeof AdminImport
    }
    '/admin/order': {
      id: '/admin/order'
      path: '/order'
      fullPath: '/admin/order'
      preLoaderRoute: typeof AdminOrderImport
      parentRoute: typeof AdminImport
    }
    '/admin/staff': {
      id: '/admin/staff'
      path: '/staff'
      fullPath: '/admin/staff'
      preLoaderRoute: typeof AdminStaffImport
      parentRoute: typeof AdminImport
    }
    '/admin/tables': {
      id: '/admin/tables'
      path: '/tables'
      fullPath: '/admin/tables'
      preLoaderRoute: typeof AdminTablesImport
      parentRoute: typeof AdminImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/kitchen/': {
      id: '/kitchen/'
      path: '/'
      fullPath: '/kitchen/'
      preLoaderRoute: typeof KitchenIndexImport
      parentRoute: typeof KitchenImport
    }
    '/waiter/': {
      id: '/waiter/'
      path: '/waiter'
      fullPath: '/waiter'
      preLoaderRoute: typeof WaiterIndexImport
      parentRoute: typeof rootRoute
    }
    '/restaurant/$restaurantId/menu/': {
      id: '/restaurant/$restaurantId/menu/'
      path: '/restaurant/$restaurantId/menu'
      fullPath: '/restaurant/$restaurantId/menu'
      preLoaderRoute: typeof RestaurantRestaurantIdMenuIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminMenuRoute: typeof AdminMenuRoute
  AdminOrderRoute: typeof AdminOrderRoute
  AdminStaffRoute: typeof AdminStaffRoute
  AdminTablesRoute: typeof AdminTablesRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminMenuRoute: AdminMenuRoute,
  AdminOrderRoute: AdminOrderRoute,
  AdminStaffRoute: AdminStaffRoute,
  AdminTablesRoute: AdminTablesRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface KitchenRouteChildren {
  KitchenIndexRoute: typeof KitchenIndexRoute
}

const KitchenRouteChildren: KitchenRouteChildren = {
  KitchenIndexRoute: KitchenIndexRoute,
}

const KitchenRouteWithChildren =
  KitchenRoute._addFileChildren(KitchenRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/kitchen': typeof KitchenRouteWithChildren
  '/admin/menu': typeof AdminMenuRoute
  '/admin/order': typeof AdminOrderRoute
  '/admin/staff': typeof AdminStaffRoute
  '/admin/tables': typeof AdminTablesRoute
  '/admin/': typeof AdminIndexRoute
  '/kitchen/': typeof KitchenIndexRoute
  '/waiter': typeof WaiterIndexRoute
  '/restaurant/$restaurantId/menu': typeof RestaurantRestaurantIdMenuIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/menu': typeof AdminMenuRoute
  '/admin/order': typeof AdminOrderRoute
  '/admin/staff': typeof AdminStaffRoute
  '/admin/tables': typeof AdminTablesRoute
  '/admin': typeof AdminIndexRoute
  '/kitchen': typeof KitchenIndexRoute
  '/waiter': typeof WaiterIndexRoute
  '/restaurant/$restaurantId/menu': typeof RestaurantRestaurantIdMenuIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/kitchen': typeof KitchenRouteWithChildren
  '/admin/menu': typeof AdminMenuRoute
  '/admin/order': typeof AdminOrderRoute
  '/admin/staff': typeof AdminStaffRoute
  '/admin/tables': typeof AdminTablesRoute
  '/admin/': typeof AdminIndexRoute
  '/kitchen/': typeof KitchenIndexRoute
  '/waiter/': typeof WaiterIndexRoute
  '/restaurant/$restaurantId/menu/': typeof RestaurantRestaurantIdMenuIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/kitchen'
    | '/admin/menu'
    | '/admin/order'
    | '/admin/staff'
    | '/admin/tables'
    | '/admin/'
    | '/kitchen/'
    | '/waiter'
    | '/restaurant/$restaurantId/menu'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/menu'
    | '/admin/order'
    | '/admin/staff'
    | '/admin/tables'
    | '/admin'
    | '/kitchen'
    | '/waiter'
    | '/restaurant/$restaurantId/menu'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/kitchen'
    | '/admin/menu'
    | '/admin/order'
    | '/admin/staff'
    | '/admin/tables'
    | '/admin/'
    | '/kitchen/'
    | '/waiter/'
    | '/restaurant/$restaurantId/menu/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  KitchenRoute: typeof KitchenRouteWithChildren
  WaiterIndexRoute: typeof WaiterIndexRoute
  RestaurantRestaurantIdMenuIndexRoute: typeof RestaurantRestaurantIdMenuIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  KitchenRoute: KitchenRouteWithChildren,
  WaiterIndexRoute: WaiterIndexRoute,
  RestaurantRestaurantIdMenuIndexRoute: RestaurantRestaurantIdMenuIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/kitchen",
        "/waiter/",
        "/restaurant/$restaurantId/menu/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/menu",
        "/admin/order",
        "/admin/staff",
        "/admin/tables",
        "/admin/"
      ]
    },
    "/kitchen": {
      "filePath": "kitchen.tsx",
      "children": [
        "/kitchen/"
      ]
    },
    "/admin/menu": {
      "filePath": "admin/menu.tsx",
      "parent": "/admin"
    },
    "/admin/order": {
      "filePath": "admin/order.tsx",
      "parent": "/admin"
    },
    "/admin/staff": {
      "filePath": "admin/staff.tsx",
      "parent": "/admin"
    },
    "/admin/tables": {
      "filePath": "admin/tables.tsx",
      "parent": "/admin"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/kitchen/": {
      "filePath": "kitchen/index.tsx",
      "parent": "/kitchen"
    },
    "/waiter/": {
      "filePath": "waiter/index.tsx"
    },
    "/restaurant/$restaurantId/menu/": {
      "filePath": "restaurant/$restaurantId/menu/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
