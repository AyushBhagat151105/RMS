generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum method {
  CASH
  CARD
  ONLINE
}

enum status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                      String         @id @default(uuid())
  username                String         @unique
  fullName                String
  email                   String         @unique
  password                String
  avatar                  String?
  role                    Role           @default(CUSTOMER)
  isVerified              Boolean        @default(false)
  accessToken             String?        @unique
  verificationToken       String?        @unique
  verificationTokenExpiry DateTime?
  resetToken              String?        @unique
  resetTokenExpiry        DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  Notification            Notification[]
  Orders                  Orders[]
  restaurants             restaurants[]
}

model Waiter {
  id           String      @id @default(uuid())
  fullName     String
  email        String      @unique
  password     String
  avatar       String?
  accessToken  String?     @unique
  role         String      @default("Waiter")
  restaurantId String
  restaurant   restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([restaurantId])
}

model Kitchen {
  id           String      @id @default(uuid())
  fullName     String
  email        String      @unique
  password     String
  avatar       String?
  role         String      @default("Kitchen")
  accessToken  String?     @unique
  restaurantId String
  restaurant   restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([restaurantId])
}

model restaurants {
  id              String            @id @default(uuid())
  name            String            @unique
  description     String?
  address         String
  phone           String?
  email           String?           @unique
  logoUrl         String?
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  menuItem        menuItem[]
  menu_categories menu_categories[]
  tables          tables[]
  Orders          Orders[]
  Waiter          Waiter[]
  Kitchen         Kitchen[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Orders {
  id           String       @id @default(uuid())
  userId       String
  tableId      String
  status       OrderStatus  @default(PENDING)
  total        Float        @default(0.0)
  restaurantId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  table        tables       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  Order_Item   Order_Item[]
  payment      payment[]
  restaurant   restaurants  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model tables {
  id           String      @id @default(uuid())
  number       Int
  capacity     Int
  restaurantId String
  qrCodeUrl    String?
  restaurant   restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  Orders Orders[]

  @@index([restaurantId])
}

model Order_Item {
  id         String   @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int      @default(1)
  price      Float
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order    Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem menuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
}

model payment {
  id        String   @id @default(uuid())
  orderId   String
  amount    Float
  method    method   @default(CASH)
  status    status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model menuItem {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  available    Boolean  @default(true)
  restaurantId String
  categoryId   String?
  tags         String[]

  category   menu_categories? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  restaurant restaurants      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Order_Item Order_Item[]

  @@index([name])
}

model menu_categories {
  id           String      @id @default(uuid())
  name         String
  restaurantId String
  restaurant   restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItem     menuItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([name, restaurantId])
  @@index([restaurantId])
  @@index([name])
}
